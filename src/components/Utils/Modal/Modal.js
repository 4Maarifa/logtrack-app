import React, { useState } from 'react';
import { faTimes } from '@fortawesome/pro-light-svg-icons';

import Icon from './../Icon/Icon';

import ModalService, { MODAL_EVENT_TYPES } from './../../../services/modal.service';

import './Modal.scss';

/**
 * Component: Modal
 * Used to confirm / information
 * 
 * /!\ this component works with ModelService and must never be called directly!!
 * Don't include a <Modal/> component in your components.
 * The project must include one and only one modal, generated by index.
 * Its content is changed via ModalService. Call the functions of ModalService instead!!
 * 
 * options: { actions, noClose }
 */
const Modal = () => {

  // tells to show or not
  const [isShow, setShow] = useState(false);

  // Current title, content and options
  const [title, setTitle] = useState('');
  const [content, setContent] = useState(null);
  const [options, setOptions] = useState({ actions: [] });

  // Rerender count to force rerender when the content changed
  const [, setRerenderCount] = useState(0);

  // Listen for event from Modal service
  const listen = (event, params) => {

    if(event === MODAL_EVENT_TYPES.NEW_MODAL) {
      // If a new modal should be printed, set the new modal options as well as show the popup
      setTitle(params.title);
      setContent(params.content);
      setOptions(params.options);
      setShow(true);
    }

    if(event === MODAL_EVENT_TYPES.RERENDER) {
      // If a call for rerender was sent, rerender the modal
      // useful when options have changed
      setRerenderCount(r => r + 1);
    }
  };

  // Action handler
  const onAction = value => {
    // When an aciton is triggered, call the callback stored in the ModalService
    ModalService.triggerCallback(value);

    // Then, hide modal
    setShow(false);
  };

  // Register the unique modal and link it to the ModalService
  ModalService.changeListener(listen);

  /**
   * RENDER
   */
  return (
    <div className={'Modal ' + (isShow ? 'Modal--show ' : '') + (options.noClose ? 'Modal-noClose' : '')}>

      {/* Modal overlay */}
      <div className="Modal-back" onClick={() => !options.noClose && onAction('CLOSE')}></div>

      {/* Content */}
      <div className="Modal-content">
        <h1 className="Modal-title">
          {title}

          {/* Close button */}
          <button className="flat Modal-close" onClick={() => onAction('CLOSE')}>
            <Icon source="fa" icon={faTimes} />
          </button>
        </h1>
        <div className="Modal-data">{content}</div>

        {/*Actions */}
        <div className="Modal-actions">
          {options.actions.map(action =>
            <button key={action.value} value={action.value} onClick={() => onAction(action.value)}>{action.content}</button>  
          )}

          {/* Close button */}
          {!options.noClose ? <button key="close" onClick={() => onAction('CLOSE')}>Close</button> : null}
        </div>
      </div>
    </div>
  );
};

export default Modal;
