import DataService from './data.service';
import ErrorService from './error.service';

import { ERole } from './../classes/Role';

/**
 * Enum: ERights
 * Enum that list all specific right on the app
 */
export const ERights = {

  // Tells if the user can use GPS
  APP_CAN_USE_GPS: 'APP_CAN_USE_GPS',

  // Tells if the user can use LogTracks
  APP_CAN_USE_LOGTRACKS: 'APP_CAN_USE_LOGTRACKS',

  // Tells if the user can use Contracts management
  APP_CAN_USE_CONTRACT_MANAGEMENT: 'APP_CAN_USE_CONTRACT_MANAGEMENT',

  // Tells if the user can use employee management
  APP_CAN_USE_EMPLOYEE_MANAGEMENT: 'APP_CAN_USE_EMPLOYEE_MANAGEMENT',

  // Tells if the user can use equipment management
  APP_CAN_USE_EQUIPMENT_MANAGEMENT: 'APP_CAN_USE_EQUIPMENT_MANAGEMENT',

  // Tells if the user can use warehouse management
  APP_CAN_USE_WAREHOUSE_MANAGEMENT: 'APP_CAN_USE_WAREHOUSE_MANAGEMENT',
  
  // Tells if the user can use invoices management
  APP_CAN_USE_INVOICE_MANAGEMENT: 'APP_CAN_USE_INVOICE_MANAGEMENT',

  // Tells if the user can use analytics
  APP_CAN_USE_ANALYTICS: 'APP_CAN_USE_ANALYTICS',

  // Tells if the user can use Forms
  APP_CAN_USE_FORMS: 'APP_CAN_USE_FORMS',

  // Tells if the user can use Job offers management
  APP_CAN_USE_JOBOFFERS_MANAGEMENT: 'APP_CAN_USE_JOBOFFERS_MANAGEMENT',
  
  // Tells if the user can use maintenance
  APP_CAN_USE_MAINTENANCE: 'APP_CAN_USE_MAINTENANCE',

  // Tells if the user can use Admin management
  APP_CAN_USE_ADMIN_MANAGEMENT: 'APP_CAN_USE_ADMIN_MANAGEMENT',

  // RT USER MESSAGES RIGHTS
  RIGHT_RT_USER_CREATE: 'RIGHT_RT_USER_CREATE',
  RIGHT_RT_USER_GET: 'RIGHT_RT_USER_GET',
  RIGHT_RT_USER_LIST: 'RIGHT_RT_USER_LIST',
  RIGHT_RT_USER_UPDATE: 'RIGHT_RT_USER_UPDATE',
  RIGHT_RT_USER_DELETE: 'RIGHT_RT_USER_DELETE',
  
  // RT COMPANY MESSAGES RIGHTS
  RIGHT_RT_COMPANY_CREATE: 'RIGHT_RT_COMPANY_CREATE',
  RIGHT_RT_COMPANY_GET: 'RIGHT_RT_COMPANY_GET',
  RIGHT_RT_COMPANY_LIST: 'RIGHT_RT_COMPANY_LIST',
  RIGHT_RT_COMPANY_UPDATE: 'RIGHT_RT_COMPANY_UPDATE',
  RIGHT_RT_COMPANY_DELETE: 'RIGHT_RT_COMPANY_DELETE',

  // BRAND ENTITY RIGHTS
  RIGHT_BRAND_CREATE: 'RIGHT_BRAND_CREATE',
  RIGHT_BRAND_GET: 'RIGHT_BRAND_GET',
  RIGHT_BRAND_LIST: 'RIGHT_BRAND_LIST',
  RIGHT_BRAND_UPDATE: 'RIGHT_BRAND_UPDATE',
  RIGHT_BRAND_DELETE: 'RIGHT_BRAND_DELETE',

  // COMPANY ENTITY RIGHTS
  RIGHT_COMPANY_CREATE: 'RIGHT_COMPANY_CREATE',
  RIGHT_COMPANY_GET: 'RIGHT_COMPANY_GET',
  RIGHT_COMPANY_LIST: 'RIGHT_COMPANY_LIST',
  RIGHT_COMPANY_UPDATE: 'RIGHT_COMPANY_UPDATE',
  RIGHT_COMPANY_DELETE: 'RIGHT_COMPANY_DELETE',

  // JOB OFFERS ENTITY RIGHTS
  RIGHT_JOBOFFERS_CREATE: 'RIGHT_JOBOFFERS_CREATE',
  RIGHT_JOBOFFERS_GET: 'RIGHT_JOBOFFERS_GET',
  RIGHT_JOBOFFERS_LIST: 'RIGHT_JOBOFFERS_LIST',
  RIGHT_JOBOFFERS_UPDATE: 'RIGHT_JOBOFFERS_UPDATE',
  RIGHT_JOBOFFERS_DELETE: 'RIGHT_JOBOFFERS_DELETE',

  // CONTRACT ENTITY RIGHTS
  RIGHT_CONTRACT_CREATE: 'RIGHT_CONTRACT_CREATE',
  RIGHT_CONTRACT_GET: 'RIGHT_CONTRACT_GET',
  RIGHT_CONTRACT_LIST: 'RIGHT_CONTRACT_LIST',
  RIGHT_CONTRACT_UPDATE: 'RIGHT_CONTRACT_UPDATE',
  RIGHT_CONTRACT_DELETE: 'RIGHT_CONTRACT_DELETE',

  // EMPLOYEE ENTITY RIGHTS
  RIGHT_EMPLOYEE_CREATE: 'RIGHT_EMPLOYEE_CREATE',
  RIGHT_EMPLOYEE_GET: 'RIGHT_EMPLOYEE_GET',
  RIGHT_EMPLOYEE_LIST: 'RIGHT_EMPLOYEE_LIST',
  RIGHT_EMPLOYEE_UPDATE: 'RIGHT_EMPLOYEE_UPDATE',
  RIGHT_EMPLOYEE_DELETE: 'RIGHT_EMPLOYEE_DELETE',

  // ACCOUNT ACTIVITY ENTITY RIGHTS
  RIGHT_ACCOUNT_ACTIVITY_CREATE: 'RIGHT_ACCOUNT_ACTIVITY_CREATE',
  RIGHT_ACCOUNT_ACTIVITY_GET: 'RIGHT_ACCOUNT_ACTIVITY_GET',
  RIGHT_ACCOUNT_ACTIVITY_LIST: 'RIGHT_ACCOUNT_ACTIVITY_LIST',
  RIGHT_ACCOUNT_ACTIVITY_UPDATE: 'RIGHT_ACCOUNT_ACTIVITY_UPDATE',
  RIGHT_ACCOUNT_ACTIVITY_DELETE: 'RIGHT_ACCOUNT_ACTIVITY_DELETE',
  
  // EQUIPMENT MODEL ENTITY RIGHTS
  RIGHT_EQUIPMENT_MODEL_CREATE: 'RIGHT_EQUIPMENT_MODEL_CREATE',
  RIGHT_EQUIPMENT_MODEL_GET: 'RIGHT_EQUIPMENT_MODEL_GET',
  RIGHT_EQUIPMENT_MODEL_LIST: 'RIGHT_EQUIPMENT_MODEL_LIST',
  RIGHT_EQUIPMENT_MODEL_UPDATE: 'RIGHT_EQUIPMENT_MODEL_UPDATE',
  RIGHT_EQUIPMENT_MODEL_DELETE: 'RIGHT_EQUIPMENT_MODEL_DELETE',
  
  // EQUIPMENT ENTITY RIGHTS
  RIGHT_EQUIPMENT_CREATE: 'RIGHT_EQUIPMENT_CREATE',
  RIGHT_EQUIPMENT_GET: 'RIGHT_EQUIPMENT_GET',
  RIGHT_EQUIPMENT_LIST: 'RIGHT_EQUIPMENT_LIST',
  RIGHT_EQUIPMENT_UPDATE: 'RIGHT_EQUIPMENT_UPDATE',
  RIGHT_EQUIPMENT_DELETE: 'RIGHT_EQUIPMENT_DELETE',

  // LOGTRACK ENTITY RIGHTS
  RIGHT_LOGTRACK_CREATE: 'RIGHT_LOGTRACK_CREATE',
  RIGHT_LOGTRACK_GET: 'RIGHT_LOGTRACK_GET',
  RIGHT_LOGTRACK_LIST: 'RIGHT_LOGTRACK_LIST',
  RIGHT_LOGTRACK_UPDATE: 'RIGHT_LOGTRACK_UPDATE',
  RIGHT_LOGTRACK_DELETE: 'RIGHT_LOGTRACK_DELETE',

  // ROLE ENTITY RIGHTS
  RIGHT_ROLE_CREATE: 'RIGHT_ROLE_CREATE',
  RIGHT_ROLE_GET: 'RIGHT_ROLE_GET',
  RIGHT_ROLE_LIST: 'RIGHT_ROLE_LIST',
  RIGHT_ROLE_UPDATE: 'RIGHT_ROLE_UPDATE',
  RIGHT_ROLE_DELETE: 'RIGHT_ROLE_DELETE',

  // SUPPORT ENTITY RIGHTS
  RIGHT_SUPPORT_CREATE: 'RIGHT_SUPPORT_CREATE',
  RIGHT_SUPPORT_GET: 'RIGHT_SUPPORT_GET',
  RIGHT_SUPPORT_LIST: 'RIGHT_SUPPORT_LIST',
  RIGHT_SUPPORT_UPDATE: 'RIGHT_SUPPORT_UPDATE',
  RIGHT_SUPPORT_DELETE: 'RIGHT_SUPPORT_DELETE',

  // CONTACT MESSAGES ENTITY RIGHTS
  RIGHT_CONTACT_CREATE: 'RIGHT_CONTACT_CREATE',
  RIGHT_CONTACT_GET: 'RIGHT_CONTACT_GET',
  RIGHT_CONTACT_LIST: 'RIGHT_CONTACT_LIST',
  RIGHT_CONTACT_UPDATE: 'RIGHT_CONTACT_UPDATE',
  RIGHT_CONTACT_DELETE: 'RIGHT_CONTACT_DELETE',

  // WAREHOUSE ENTITY RIGHTS
  RIGHT_WAREHOUSE_CREATE: 'RIGHT_WAREHOUSE_CREATE',
  RIGHT_WAREHOUSE_GET: 'RIGHT_WAREHOUSE_GET',
  RIGHT_WAREHOUSE_LIST: 'RIGHT_WAREHOUSE_LIST',
  RIGHT_WAREHOUSE_UPDATE: 'RIGHT_WAREHOUSE_UPDATE',
  RIGHT_WAREHOUSE_DELETE: 'RIGHT_WAREHOUSE_DELETE',

  // WEATHER ENTITY RIGHTS
  RIGHT_WEATHER_CREATE: 'RIGHT_WEATHER_CREATE',
  RIGHT_WEATHER_GET: 'RIGHT_WEATHER_GET',
  RIGHT_WEATHER_LIST: 'RIGHT_WEATHER_LIST',
  RIGHT_WEATHER_UPDATE: 'RIGHT_WEATHER_UPDATE',
  RIGHT_WEATHER_DELETE: 'RIGHT_WEATHER_DELETE',

  // FORM ENTITY RIGHTS
  RIGHT_FORM_CREATE: 'RIGHT_FORM_CREATE',
  RIGHT_FORM_GET: 'RIGHT_FORM_GET',
  RIGHT_FORM_LIST: 'RIGHT_FORM_LIST',
  RIGHT_FORM_UPDATE: 'RIGHT_FORM_UPDATE',
  RIGHT_FORM_DELETE: 'RIGHT_FORM_DELETE'
};

/**
 * Service: RightService
 * Service to manage rights
 */
const RightService = {

  // Tells if the user has a specific role
  hasAppRight: right => {

    // If the user has no active role or is not signed in, he has no access
    if(!DataService.computed.activeRole || !DataService.computed.employee) {
      return false;
    }

    // Admin management is for staff only
    if(right === ERights.APP_CAN_USE_ADMIN_MANAGEMENT) {
      return DataService.computed.employee.staff;
    }

    // GPS is build for drivers
    if(right === ERights.APP_CAN_USE_GPS) {
      return DataService.computed.activeRole.role === ERole.DRIVER;
    }

    // Maintenance is build for mechanics
    if(right === ERights.APP_CAN_USE_MAINTENANCE) {
      return DataService.computed.activeRole.role === ERole.MECHANIC;
    }

    // LogTracks can be used by managers, drivers and mechanics
    if(right === ERights.APP_CAN_USE_LOGTRACKS) {
      return DataService.computed.activeRole.role === ERole.MANAGER || 
        DataService.computed.activeRole.role === ERole.DRIVER ||
        DataService.computed.activeRole.role === ERole.MECHANIC;
    }
    // Contract, employee, equipment, warehouse, invoices and analytics are for managers only
    if(right === ERights.APP_CAN_USE_CONTRACT_MANAGEMENT ||
        right === ERights.APP_CAN_USE_EMPLOYEE_MANAGEMENT ||
        right === ERights.APP_CAN_USE_EQUIPMENT_MANAGEMENT ||
        right === ERights.APP_CAN_USE_WAREHOUSE_MANAGEMENT ||
        right === ERights.APP_CAN_USE_INVOICE_MANAGEMENT ||
        right === ERights.APP_CAN_USE_ANALYTICS) {

      return DataService.computed.activeRole.role === ERole.MANAGER;
    }

    // Forms
    if(right === ERights.APP_CAN_USE_FORMS) {
      return DataService.computed.activeRole.role === ERole.MANAGER
        || DataService.computed.activeRole.role === ERole.INSURER;
    }

    // Job Offers management is for manager and recruiters
    if(right === ERights.APP_CAN_USE_JOBOFFERS_MANAGEMENT) {
      return DataService.computed.activeRole.role === ERole.MANAGER ||
        DataService.computed.activeRole.role === ERole.RECRUITER;
    }

    // If role is unkwnown, throw error
    ErrorService.error('Right ' + right + ' is unknown');
    return false;
  }
};

export default RightService;
